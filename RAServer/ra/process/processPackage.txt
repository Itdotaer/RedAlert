AvailabilityPolicyChecker.cpp:23:    assert(NULL != _processPackage);
AvailabilityPolicyChecker.cpp:24:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
AvailabilityPolicyChecker.cpp:43:    assert(NULL != _processPackage);
AvailabilityPolicyChecker.cpp:44:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
AvailabilityPolicyChecker.cpp:62:        assert(NULL != _processPackage);
AvailabilityPolicyChecker.cpp:63:        const tree::RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
CheckerWorkItem.cpp:103:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
CheckerWorkItem.cpp:37:    _processPackage = processPackage;
CheckerWorkItem.cpp:39:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
CheckerWorkItem.cpp:57:    if (!_policyChecker->init(_processPackage)) {
CheckerWorkItem.cpp:73:    assert(NULL != _processPackage);
CheckerWorkItem.cpp:79:            const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
CheckerWorkItem.h:33:    tree::ProcessPackagePtr _processPackage;
CyclePolicyChecker.cpp:23:    assert(NULL != _processPackage);
CyclePolicyChecker.cpp:24:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
FetcherWorkItem.cpp:18:    : _processPackage(processPackage)
FetcherWorkItem.cpp:32:    if (!_fetcherManager->retrieveMetrics(_processPackage, curTimeUs)) {
FetcherWorkItem.cpp:33:        const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
FetcherWorkItem.cpp:40:        _processPackage->setState(ProcessPackage::PPS_IDLE);
FetcherWorkItem.cpp:44:        _processPackage->setLastRetrieveTimeUs(curTimeUs);
FetcherWorkItem.cpp:46:        if (!_checkerManager->pushProcessPackage(_processPackage)) {
FetcherWorkItem.cpp:49:            _processPackage->setState(ProcessPackage::PPS_IDLE);
FetcherWorkItem.cpp:61:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
FetcherWorkItem.h:33:    tree::ProcessPackagePtr _processPackage;
PolicyChecker.cpp:117:    assert(NULL != _processPackage);
PolicyChecker.cpp:118:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
PolicyChecker.cpp:148:    assert(NULL != _processPackage);
PolicyChecker.cpp:149:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
PolicyChecker.cpp:171:    assert(NULL != _processPackage);
PolicyChecker.cpp:172:    const vector<RetrieveMetricsResponse2Ptr>& responVec = _processPackage->getResponseVec();
PolicyChecker.cpp:250:    assert(NULL != _processPackage);
PolicyChecker.cpp:251:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
PolicyChecker.cpp:263:    assert(NULL != _processPackage);
PolicyChecker.cpp:264:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
PolicyChecker.cpp:32:    _processPackage = processPackage;
PolicyChecker.cpp:33:    _alarmMsg.reset(new AlarmMsg(_processPackage, CODE_CRITICAL));
PolicyChecker.cpp:39:    if (NULL == _processPackage) {
PolicyChecker.cpp:46:    assert(NULL != _processPackage);
PolicyChecker.cpp:47:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
PolicyChecker.cpp:82:    assert(NULL != _processPackage);
PolicyChecker.cpp:83:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
PolicyChecker.h:75:    tree::ProcessPackagePtr _processPackage;
PolicyChecker.h:98:    assert(NULL != _processPackage);
PolicyChecker.h:99:    const tree::RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
SingularityPolicyChecker.cpp:23:    assert(NULL != _processPackage);
SingularityPolicyChecker.cpp:24:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
test/AvailabilityPolicyCheckerTest.cpp:71:    checker._processPackage = processPackage;
test/TrendPolicyCheckerTest.cpp:72:    checker._processPackage = processPackage;
ThresholdPolicyChecker.cpp:22:    assert(NULL != _processPackage);
ThresholdPolicyChecker.cpp:23:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
TrendPolicyChecker.cpp:22:    assert(NULL != _processPackage);
TrendPolicyChecker.cpp:23:    const RequestPackagePtr& requestPackage = _processPackage->getRequestPackage();
TrendPolicyChecker.cpp:59:    assert(NULL != _processPackage);
TrendPolicyChecker.cpp:60:    TrendDataPtr trendData = _processPackage->getTrendData();
